{"version":3,"sources":["Card.js","CardEngine.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","highcolor","lowcolor","useState","city","inputs","setInputs","weather","temp","inputMode","setInputMode","className","style","background","type","name","value","onChange","e","target","onClick","preventDefault","handleChange","country","forecast","icon","feels_like","CardEngine","React","setWeather","location","input","a","query","fetch","data","json","parsedData","sys","main","console","log","useEffect","App","window","alert","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kPA0EeA,EAxEF,SAACC,GAAW,IAKnBC,EACAC,EANkB,EACMC,mBAAS,CACnCC,KAAM,OAFc,mBACfC,EADe,KACPC,EADO,KAOlBN,EAAMO,QAAQC,KAAO,IACvBP,EAAY,kBACZC,EAAW,sBAEXD,EAAY,kBACZC,EAAW,qBAZS,MAeYC,oBAAS,GAfrB,mBAefM,EAfe,KAeJC,EAfI,KAiBtB,OACE,yBACEC,UAAU,OACVC,MAAO,CACLC,WAAW,2BAAD,OAA6BZ,EAA7B,aAA2CC,EAA3C,OAGVO,EAiBA,yBAAKE,UAAU,mBACb,6BACE,+BACE,sCACA,2BACEG,KAAK,OACLC,KAAK,OACLC,MAAOX,EAAOD,KACda,SAAU,SAACC,GACT,OAAOZ,EAAU,CAAEF,KAAMc,EAAEC,OAAOH,aAK1C,6BACE,2BACEF,KAAK,SACLH,UAAU,MACVS,QAAS,SAACF,GACRA,EAAEG,iBACFX,GAAa,GACbV,EAAMsB,aAAajB,EAAOD,WArClC,yBACEO,UAAU,yBACVS,QAAS,WACPV,GAAa,KAGf,2BAAIV,EAAMO,QAAQH,KAAOJ,EAAMO,QAAQH,KAAO,mBAC9C,2BAAIJ,EAAMO,QAAQgB,SAClB,0CAAgBvB,EAAMO,QAAQiB,UAC9B,6BAAMxB,EAAMO,QAAQkB,MACpB,yBAAKd,UAAU,aACb,0CAAgBX,EAAMO,QAAQmB,WAA9B,SACA,qCAAW1B,EAAMO,QAAQC,KAAzB,aCHGmB,EAjCI,SAAC3B,GAAW,IAAD,EACE4B,IAAMzB,SAAS,CAC3CC,KAAM,GACNI,KAAM,EACNe,QAAS,GACTG,WAAY,KACZF,SAAU,OANgB,mBACrBjB,EADqB,KACZsB,EADY,KAQtBC,EAAW9B,EAAM8B,SARK,SAUbR,EAVa,8EAU5B,WAA4BS,GAA5B,mBAAAC,EAAA,6DACQC,EADR,UACmBF,GADnB,kBAGuBG,MAAM,qDAAD,OAC+BD,EAD/B,yDAH5B,cAGUE,EAHV,gBAM6BA,EAAKC,OANlC,OAMUC,EANV,OAOIR,EAAW,CACTzB,KAAMiC,EAAWtB,KACjBQ,QAASc,EAAWC,IAAIf,QACxBf,KAAM6B,EAAWE,KAAK/B,KACtBkB,WAAYW,EAAWE,KAAKb,WAC5BF,SAAUa,EAAW9B,QAAQ,GAAGgC,OAZtC,kDAeIC,QAAQC,IAAR,MAfJ,2DAV4B,sBA8B5B,OAFAb,IAAMc,WAAU,kBAAMpB,EAAaQ,KAAW,CAACA,IAExC,kBAAC,EAAD,CAAMR,aAAcA,EAAcf,QAASA,KChBrCoC,EAbH,WAIV,OAHAf,IAAMc,WAAU,WACdE,OAAOC,MAAM,iEACZ,IAED,yBAAKlC,UAAU,kBACb,kBAAC,EAAD,CAAYmB,SAAS,YACrB,kBAAC,EAAD,CAAYA,SAAS,WACrB,kBAAC,EAAD,CAAYA,SAAS,eCAPgB,QACW,cAA7BF,OAAOd,SAASiB,UAEe,UAA7BH,OAAOd,SAASiB,UAEhBH,OAAOd,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.d664b590.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Card = (props) => {\r\n  const [inputs, setInputs] = useState({\r\n    city: null,\r\n  });\r\n\r\n  let highcolor;\r\n  let lowcolor;\r\n  if (props.weather.temp > 25) {\r\n    highcolor = \"rgba(255, 0, 0)\";\r\n    lowcolor = \"rgba(255, 150, 0)\";\r\n  } else {\r\n    highcolor = \"rgba(0, 0, 255)\";\r\n    lowcolor = \"rgba(0, 200, 255)\";\r\n  }\r\n\r\n  const [inputMode, setInputMode] = useState(false);\r\n\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      style={{\r\n        background: `linear-gradient(to top, ${highcolor}, ${lowcolor})`,\r\n      }}\r\n    >\r\n      {!inputMode ? (\r\n        <div\r\n          className=\"card-city card-country\"\r\n          onClick={() => {\r\n            setInputMode(true);\r\n          }}\r\n        >\r\n          <p>{props.weather.city ? props.weather.city : \"Enter City Name\"}</p>\r\n          <p>{props.weather.country}</p>\r\n          <p>Condition : {props.weather.forecast}</p>\r\n          <div>{props.weather.icon}</div>\r\n          <div className=\"card-temp\">\r\n            <p>Feels like: {props.weather.feels_like}°C</p>\r\n            <p>Temp : {props.weather.temp}°C</p>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"card-city-input\">\r\n          <div>\r\n            <label>\r\n              <span>City</span>\r\n              <input\r\n                type=\"text\"\r\n                name=\"city\"\r\n                value={inputs.city}\r\n                onChange={(e) => {\r\n                  return setInputs({ city: e.target.value });\r\n                }}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <input\r\n              type=\"submit\"\r\n              className=\"btn\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                setInputMode(false);\r\n                props.handleChange(inputs.city);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card.js\";\r\n\r\nconst CardEngine = (props) => {\r\n  const [weather, setWeather] = React.useState({\r\n    city: \"\",\r\n    temp: 0,\r\n    country: \"\",\r\n    feels_like: null,\r\n    forecast: null,\r\n  });\r\n  const location = props.location;\r\n\r\n  async function handleChange(input) {\r\n    const query = `${input}`;\r\n    try {\r\n      const data = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&APPID=e4d914bebb045b13379b2ad11024d1d6`\r\n      );\r\n      const parsedData = await data.json();\r\n      setWeather({\r\n        city: parsedData.name,\r\n        country: parsedData.sys.country,\r\n        temp: parsedData.main.temp,\r\n        feels_like: parsedData.main.feels_like,\r\n        forecast: parsedData.weather[0].main,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  React.useEffect(() => handleChange(location), [location]);\r\n\r\n  return <Card handleChange={handleChange} weather={weather} />;\r\n};\r\n\r\nexport default CardEngine;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CardEngine from \"./CardEngine.js\";\n\nconst App = () => {\n  React.useEffect(() => {\n    window.alert(\"Click anywhere on the card to enter the City of your choice\");\n  }, []);\n  return (\n    <div className=\"card-container\">\n      <CardEngine location=\"Kolkata\" />\n      <CardEngine location=\"London\" />\n      <CardEngine location=\"New York\" />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}